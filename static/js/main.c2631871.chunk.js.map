{"version":3,"sources":["components/control.js","components/timer.js","components/lengthControl.js","App.js","reportWebVitals.js","index.js"],"names":["Control","props","id","type","onClick","handleClick","value","icon","Timer","viewBox","cx","cy","r","strokeDasharray","outerLength","d","style","stroke","outerColor","innerLength","innerColor","label","time","LengthControl","name","title","faArrowDown","onChange","handleChange","faArrowUp","App","intervalRef","useRef","audioRef","useState","sessionLength","setSessionLength","short","setShort","fourth","setFourth","breakLength","setBreakLength","displayTime","setDisplayTime","current","setCurrent","running","setRunning","newPeriod","setNewPeriod","remaining","setRemaining","pomodoros","setPomodoros","useEffect","p","startDate","Date","now","countFrom","Number","split","setInterval","startTime","left","Math","floor","play","mm","concat","ss","displayValue","countdown","int","clearInterval","handleBreakClick","e","currentTarget","change","input","val","sessionLoopOutline","sessionLoopColor","breakLoopOutline","breakLoopColor","playPause","faPause","faPlay","repeat","pause","load","faSync","src","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2631871.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Control = (props) => (\r\n  <button\r\n  \tid={props.id}\r\n    type='button'\r\n    onClick={props.handleClick}\r\n    value={props.value}\r\n  >\r\n    <FontAwesomeIcon icon={props.icon} />\r\n  </button>\r\n)\r\n\r\nexport default Control","const Timer = (props) => (\r\n  <div id='timer'>\r\n  \t<svg id='timer-svg' viewBox='0 0 100 100'>\r\n  \t\t<g id='timer-circle'>\r\n  \t\t\t<circle id='timer-circle-outter' cx='50' cy='50' r='45' />\r\n  \t\t\t<path\r\n\t\t        id=\"timer-circle-outer-rem\"\r\n\t\t        strokeDasharray={props.outerLength}\r\n\t\t        d=\"\r\n\t\t          M 50, 50\r\n\t\t          m -45, 0\r\n\t\t          a 45,45 0 1,0 90,0\r\n\t\t          a 45,45 0 1,0 -90,0\r\n\t\t        \"\r\n\t\t        style={{ stroke: props.outerColor }}\r\n\t\t    ></path>\r\n  \t\t\t<circle id='timer-circle-inner' cx='50' cy='50' r='40' />\r\n  \t\t\t<path\r\n\t\t        id=\"timer-circle-inner-rem\"\r\n\t\t        strokeDasharray={props.innerLength}\r\n\t\t        d=\"\r\n\t\t          M 50, 50\r\n\t\t          m -40, 0\r\n\t\t          a 40,40 0 1,0 80,0\r\n\t\t          a 40,40 0 1,0 -80,0\r\n\t\t        \"\r\n\t\t        style={{ stroke: props.innerColor }}\r\n\t\t    ></path>\r\n  \t\t</g>\r\n  \t</svg>\r\n  \t<div id='timer-text'>\r\n\t    <p id='timer-label'>{props.label}</p>\r\n\t    <p id='time-left'>{props.time}</p>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Timer","import Control from \"./control.js\"\r\nimport { faArrowDown, faArrowUp } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst LengthControl = (props) => (\r\n  <div id={props.name+'-wrapper'}>\r\n    <p id={props.name+'-label'}>{props.title}</p>\r\n    <Control \r\n      id={props.name+'-decrement'}\r\n      handleClick={props.handleClick}\r\n      icon={faArrowDown}\r\n      value='dec'\r\n    />\r\n    <input \r\n      type='text' \r\n      id={props.name+'-length'} \r\n      value={props.value} \r\n      onChange={props.handleChange} \r\n    />\r\n    <Control \r\n      id={props.name+'-increment'}\r\n      handleClick={props.handleClick}\r\n      icon={faArrowUp}\r\n      value='inc'\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default LengthControl","import { useState, useRef, useEffect } from 'react'\nimport { faPause, faPlay, faSync } from '@fortawesome/free-solid-svg-icons'\nimport './App.scss'\n\nimport Control from './components/control.js'\nimport Timer from './components/timer.js'\nimport LengthControl from './components/lengthControl.js'\n\nconst App = (props) => {\n    const intervalRef = useRef();\n    const audioRef = useRef();\n\n    const [sessionLength, setSessionLength] = useState(25); \n    const [short, setShort] = useState(5);\n    const [fourth, setFourth] = useState(15);     \n    const [breakLength, setBreakLength] = useState(short);\n    const [displayTime, setDisplayTime] = useState(sessionLength+':00');  \n    const [current, setCurrent] = useState('Session');    \n    const [running, setRunning] = useState(false);    \n    const [newPeriod, setNewPeriod] = useState('');\n    //283 is default because it matches the bigger circle\n    const [remaining, setRemaining] = useState('283'); \n    const [pomodoros, setPomodoros] = useState(0);\n    //This is the function that runs in a loop\n    //Takes the difference between the starting time and the moment at which runs \n    //Subtracts that from the initial length\n    //Does some calculations and string manipulation so the display value is always in the mm:ss format\n    const countdown = (startTime, countFrom) => {  \n        const difference = Math.floor((Date.now() - startTime) / 1000);\n        const left = countFrom - difference;\n        //this part plays a sound when the timer reaches 00:00\n        if (left === 0) audioRef.current.play();\n        if (left < 0) {\n            //Setting running to false triggers the effect which handles the interval setup \n            //or more precisely in this case - the cleanup\n            setRunning(false);\n            //This setter triggers effect responsive to newPeriod changes\n            setNewPeriod(current === 'Break' ? 'session' : 'break');\n            setRemaining('283')        \n        } else {\n            let mm = Math.floor(left / 60);\n            mm = mm < 10 ? '0'.concat(mm) : mm;\n            let ss = Math.floor(left % 60);\n            ss = ss < 10 ? '0'.concat(ss) : ss;\n\n            const displayValue = `${mm}:${ss}`;\n            const wholeLength = current === 'Session' ? sessionLength : breakLength;\n            const wholeCircle = current === 'Session' ? 251 : 283;\n            setRemaining(`${wholeCircle * left / (wholeLength * 60)}`);\n            setDisplayTime(displayValue);\n        }\n    }\n    //This effect responds to changes of newPeriod state variable - \n    //sets up a new session depending on which one just ended with the displayTime and everything \n    //AND sets running to true which again triggers the interval setter\n    useEffect(() => {\n        if (newPeriod === 'break') {\n            setCurrent('Break');\n            const length = breakLength < 10 ? '0'+breakLength : breakLength;\n            setDisplayTime(length+':00');\n            setRunning(true);\n            setPomodoros(p => p + 1);\n        } else if (newPeriod === 'session') {\n            setCurrent('Session');\n            const length = sessionLength < 10 ? '0'+sessionLength : sessionLength;\n            setDisplayTime(length+':00');\n            setRunning(true);\n            //The tally mark gets added only when a session ENDS so we set the longer break\n            //while in the 4th pomodoro i.e. when there are 3 tally marks\n            if (pomodoros === 3) setBreakLength(fourth);\n            if (pomodoros === 4) {\n                setBreakLength(short);\n                setPomodoros(0);\n            }\n        }\n    }, [newPeriod]);\n    //Responds to changes in sessionLength and adjusts the value displayed in the timer accordingly\n    useEffect(() => { \n        const length = sessionLength < 10 ? '0'+sessionLength : sessionLength;\n        setDisplayTime(length+':00') \n    }, [sessionLength]);\n    //Responds to each change of running value\n    //Sets up the variables that countdown depends on - the starting time and what value it counts down from\n    //Then it conditionally sets up a start of an interval and its clearing\n    useEffect(() => {   \n        const startDate = Date.now();\n        const countFrom = Number(displayTime.split(':')[0] * 60) + Number(displayTime.split(':')[1]);\n\n        if (running) intervalRef.current = setInterval(() => countdown(startDate, countFrom), 1000);    \n        const clear = (int) => { clearInterval(int) };\n        if (!running) clear(intervalRef.current);       \n    }, [running]);\n\n    useEffect(() => {\n        setBreakLength(short);\n    }, [short]);\n    //Handles incrementing and decrementing of the sessionLength\n    //If the timer is running the buttons do not respond\n    const handleSessionClick = (e) => {\n        const id = e.currentTarget.id;\n        if (!running) {\n            if (sessionLength < 60 && id === 'session-increment') \n              setSessionLength(sessionLength => sessionLength + 1);\n            if (sessionLength > 1 && id === 'session-decrement') \n              setSessionLength(sessionLength => sessionLength - 1);\n        }\n    }\n    //Handles incrementing and decrementing of the breakLength\n    //If the timer is running the buttons do not respond\n    const handleBreakClick = (e) => {\n        const id = e.currentTarget.id;\n        if (!running) {\n            if (short < 60 && id === 'short-increment') setShort(breakLength => breakLength + 1);\n            if (short > 1 && id === 'short-decrement') setShort(breakLength => breakLength - 1);\n            if (fourth < 60 && id === 'fourth-increment') setFourth(breakLength => breakLength + 1);\n            if (fourth > 1 && id === 'fourth-decrement') setFourth(breakLength => breakLength - 1);\n        }\n    }\n    //Handles a click on the start_stop button \n    //Changes the value of running and the effects take care of the rest\n    const startPause = () => {\n        setRunning(running => !running);\n    }\n    //Handles a click on the reset button\n    //Sets everything back to the initial state and in case the button is pressed in the middle of the sound playing\n    //it stops the playback and rewinds the audio to the beginning\n    const reset = () => {\n        setCurrent('Session');\n        setSessionLength(25);\n        setBreakLength(5);\n        setRunning(false);\n        setNewPeriod('');\n        audioRef.current.pause();\n        audioRef.current.load();\n    }\n    const change = (e) => {\n        const input = e.currentTarget;\n        const val = input.value;\n\n        if (!running) {\n            if ((Number(val) > 0 && Number(val) <= 60) || val === '') {\n                if (input.id === 'session-length') setSessionLength(input.value);\n                if (input.id === 'short-length') setShort(input.value);\n                if (input.id === 'fourth-length') setFourth(input.value);\n            }\n        }\n    }\n    //The 'tomato' becomes green when on a break and is red otherwise \n    const sessionLoopOutline = current === 'Session' ? `${remaining} 251` : \"251\";\n    const sessionLoopColor = current === 'Session' ? \"rgb(213, 101, 103)\" : \"rgba(255, 255, 255, 0.1)\";\n    const breakLoopOutline = current === 'Break' ? `${remaining} 283` : \"283\";\n    const breakLoopColor = current === 'Break' ? \"rgb(159, 213, 101)\" : \"rgba(255, 255, 255, 0.1)\";\n\n    //Handles the icon of the start_pause button\n    const playPause = running ? faPause : faPlay;\n    const beepUrl = \"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\";\n    \n    return (\n        <div id='app'>    \n            <div id='length-control'>\n                    <LengthControl \n                      name='session'\n                      title='Session length'\n                      handleClick={handleSessionClick}\n                      value={sessionLength}\n                      handleChange={change}\n                    />\n                    <div>\n                        <LengthControl \n                          name='short'\n                          title='Short break length'\n                          handleClick={handleBreakClick}\n                          value={short}\n                          handleChange={change}\n                        />\n                        <LengthControl \n                          name='fourth'\n                          title='Fourth break length'\n                          handleClick={handleBreakClick}\n                          value={fourth}\n                          handleChange={change}\n                        />\n                    </div>\n                \n                <p id='counter'>\n                    {`Pomodoros done: ${'|'.repeat(pomodoros)}`}\n                </p>\n            </div>\n            <div id='timer-controls-wrapper'>\n                <Timer \n                  label={current}\n                  time={displayTime}\n                  innerColor={sessionLoopColor}\n                  innerLength={sessionLoopOutline}\n                  outerColor={breakLoopColor}\n                  outerLength={breakLoopOutline}\n                />\n                <div id='controls'>\n                    <Control\n                      id='start_stop'\n                      handleClick={startPause}\n                      icon={playPause}\n                    />\n                    <Control\n                      id='reset'\n                      handleClick={reset}\n                      icon={faSync}\n                    />\n                    <audio \n                      id='beep' \n                      src={beepUrl}\n                      ref={audioRef} \n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}