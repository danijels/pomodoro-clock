{"version":3,"sources":["components/control.js","components/timer.js","components/lengthControl.js","App.js","reportWebVitals.js","index.js"],"names":["Control","props","id","type","onClick","handleClick","value","icon","Timer","viewBox","cx","cy","r","strokeDasharray","outerLength","d","style","stroke","outerColor","innerLength","innerColor","label","time","LengthControl","name","title","faArrowDown","onChange","handleChange","faArrowUp","App","intervalRef","useRef","audioRef","useState","sessionLength","setSessionLength","breakLength","setBreakLength","displayTime","setDisplayTime","current","setCurrent","running","setRunning","newPeriod","setNewPeriod","remaining","setRemaining","useEffect","startDate","Date","now","countFrom","Number","split","setInterval","startTime","left","Math","floor","play","mm","concat","ss","displayValue","countdown","int","clearInterval","change","e","input","currentTarget","val","sessionLoopOutline","sessionLoopColor","breakLoopOutline","breakLoopColor","playPause","faPause","faPlay","pause","load","faSync","src","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f68cfbb.chunk.js","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Control = (props) => (\r\n  <button\r\n  \tid={props.id}\r\n    type='button'\r\n    onClick={props.handleClick}\r\n    value={props.value}\r\n  >\r\n    <FontAwesomeIcon icon={props.icon} />\r\n  </button>\r\n)\r\n\r\nexport default Control","const Timer = (props) => (\r\n  <div id='timer'>\r\n  \t<svg id='timer-svg' viewBox='0 0 100 100'>\r\n  \t\t<g id='timer-circle'>\r\n  \t\t\t<circle id='timer-circle-outter' cx='50' cy='50' r='45' />\r\n  \t\t\t<path\r\n\t\t        id=\"timer-circle-outer-rem\"\r\n\t\t        strokeDasharray={props.outerLength}\r\n\t\t        d=\"\r\n\t\t          M 50, 50\r\n\t\t          m -45, 0\r\n\t\t          a 45,45 0 1,0 90,0\r\n\t\t          a 45,45 0 1,0 -90,0\r\n\t\t        \"\r\n\t\t        style={{ stroke: props.outerColor }}\r\n\t\t    ></path>\r\n  \t\t\t<circle id='timer-circle-inner' cx='50' cy='50' r='40' />\r\n  \t\t\t<path\r\n\t\t        id=\"timer-circle-inner-rem\"\r\n\t\t        strokeDasharray={props.innerLength}\r\n\t\t        d=\"\r\n\t\t          M 50, 50\r\n\t\t          m -40, 0\r\n\t\t          a 40,40 0 1,0 80,0\r\n\t\t          a 40,40 0 1,0 -80,0\r\n\t\t        \"\r\n\t\t        style={{ stroke: props.innerColor }}\r\n\t\t    ></path>\r\n  \t\t</g>\r\n  \t</svg>\r\n  \t<div id='timer-text'>\r\n\t    <p id='timer-label'>{props.label}</p>\r\n\t    <p id='time-left'>{props.time}</p>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Timer","import Control from \"./control.js\"\r\nimport { faArrowDown, faArrowUp } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nconst LengthControl = (props) => (\r\n  <div>\r\n    <p id={props.name+'-label'}>{props.title}</p>\r\n    <Control \r\n      id={props.name+'-decrement'}\r\n      handleClick={props.handleClick}\r\n      icon={faArrowDown}\r\n      value='dec'\r\n    />\r\n    <input \r\n      type='text' \r\n      id={props.name+'-length'} \r\n      value={props.value} \r\n      onChange={props.handleChange} \r\n    />\r\n    <Control \r\n      id={props.name+'-increment'}\r\n      handleClick={props.handleClick}\r\n      icon={faArrowUp}\r\n      value='inc'\r\n    />\r\n  </div>\r\n)\r\n\r\nexport default LengthControl","import { useState, useRef, useEffect } from 'react'\nimport { faPause, faPlay, faSync } from '@fortawesome/free-solid-svg-icons'\nimport './App.scss'\n\nimport Control from './components/control.js'\nimport Timer from './components/timer.js'\nimport LengthControl from './components/lengthControl.js'\n\nconst App = (props) => {\n    const intervalRef = useRef();\n    const audioRef = useRef();\n\n    const [sessionLength, setSessionLength] = useState(25);  \n    const [breakLength, setBreakLength] = useState(5);\n    const [displayTime, setDisplayTime] = useState(sessionLength+':00');  \n    const [current, setCurrent] = useState('Session');    \n    const [running, setRunning] = useState(false);    \n    const [newPeriod, setNewPeriod] = useState('');\n    //283 is default because it matches the bigger circle\n    const [remaining, setRemaining] = useState('283'); \n    //This is the function that runs in a loop\n    //Takes the difference between the starting time and the moment at which runs \n    //Subtracts that from the initial length\n    //Does some calculations and string manipulation so the display value is always in the mm:ss format\n    const countdown = (startTime, countFrom) => {  \n        const difference = Math.floor((Date.now() - startTime) / 1000);\n        const left = countFrom - difference;\n        //this part plays a sound when the timer reaches 00:00\n        if (left === 0) audioRef.current.play();\n        if (left < 0) {\n            //Setting running to false triggers the effect which handles the interval setup \n            //or more precisely in this case - the cleanup\n            setRunning(false);\n            //This setter triggers effect responsive to newPeriod changes\n            setNewPeriod(current === 'Break' ? 'session' : 'break');\n            setRemaining('283')        \n        } else {\n            let mm = Math.floor(left / 60);\n            mm = mm < 10 ? '0'.concat(mm) : mm;\n            let ss = Math.floor(left % 60);\n            ss = ss < 10 ? '0'.concat(ss) : ss;\n\n            const displayValue = `${mm}:${ss}`;\n            const wholeLength = current === 'Session' ? sessionLength : breakLength;\n            const wholeCircle = current === 'Session' ? 251 : 283;\n            setRemaining(`${wholeCircle * left / (wholeLength * 60)}`);\n            setDisplayTime(displayValue);\n        }\n    }\n    //This effect responds to changes of newPeriod state variable - \n    //sets up a new session depending on which one just ended with the displayTime and everything \n    //AND sets running to true which again triggers the interval setter\n    useEffect(() => {\n        if (newPeriod === 'break') {\n            setCurrent('Break');\n            const length = breakLength < 10 ? '0'+breakLength : breakLength;\n            setDisplayTime(length+':00');\n            setRunning(true);\n        } else if (newPeriod === 'session') {\n            setCurrent('Session');\n            const length = sessionLength < 10 ? '0'+sessionLength : sessionLength;\n            setDisplayTime(length+':00');\n            setRunning(true);\n        }\n    }, [newPeriod]);\n    //Responds to changes in sessionLength and adjusts the value displayed in the timer accordingly\n    useEffect(() => { \n        const length = sessionLength < 10 ? '0'+sessionLength : sessionLength;\n        setDisplayTime(length+':00') \n    }, [sessionLength]);\n    //Responds to each change of running value\n    //Sets up the variables that countdown depends on - the starting time and what value it counts down from\n    //Then it conditionally sets up a start of an interval and its clearing\n    useEffect(() => {   \n        const startDate = Date.now();\n        const countFrom = Number(displayTime.split(':')[0] * 60) + Number(displayTime.split(':')[1]);\n\n        if (running) intervalRef.current = setInterval(() => countdown(startDate, countFrom), 1000);    \n        const clear = (int) => { clearInterval(int) };\n        if (!running) clear(intervalRef.current);       \n    }, [running]);\n    //Handles incrementing and decrementing of the sessionLength\n    //If the timer is running the buttons do not respond\n    const handleSessionClick = (e) => {\n        const id = e.currentTarget.id;\n        if (!running) {\n            if (sessionLength < 60 && id === 'session-increment') \n              setSessionLength(sessionLength => sessionLength + 1);\n            if (sessionLength > 1 && id === 'session-decrement') \n              setSessionLength(sessionLength => sessionLength - 1);\n        }\n    }\n    //Handles incrementing and decrementing of the breakLength\n    //If the timer is running the buttons do not respond\n    const handleBreakClick = (e) => {\n        const id = e.currentTarget.id;\n        if (!running) {\n            if (breakLength < 60 && id === 'break-increment') setBreakLength(breakLength => breakLength + 1);\n            if (breakLength > 1 && id === 'break-decrement') setBreakLength(breakLength => breakLength - 1);\n        }\n    }\n    //Handles a click on the start_stop button \n    //Changes the value of running and the effects take care of the rest\n    const startPause = () => {\n        setRunning(running => !running);\n    }\n    //Handles a click on the reset button\n    //Sets everything back to the initial state and in case the button is pressed in the middle of the sound playing\n    //it stops the playback and rewinds the audio to the beginning\n    const reset = () => {\n        setCurrent('Session');\n        setSessionLength(25);\n        setBreakLength(5);\n        setRunning(false);\n        setNewPeriod('');\n        audioRef.current.pause();\n        audioRef.current.load();\n    }\n    const change = (e) => {\n        const input = e.currentTarget;\n        const val = input.value;\n\n        if (!running) {\n            if ((Number(val) > 0 && Number(val) <= 60) || val === '') {\n                if (input.id === 'session-length') setSessionLength(input.value);\n                if (input.id === 'break-length') setBreakLength(input.value);\n            }\n        }\n    }\n    //The 'tomato' becomes green when on a break and is red otherwise \n    const sessionLoopOutline = current === 'Session' ? `${remaining} 251` : \"251\";\n    const sessionLoopColor = current === 'Session' ? \"rgb(213, 101, 103)\" : \"rgba(255, 255, 255, 0.1)\";\n    const breakLoopOutline = current === 'Break' ? `${remaining} 283` : \"283\";\n    const breakLoopColor = current === 'Break' ? \"rgb(159, 213, 101)\" : \"rgba(255, 255, 255, 0.1)\";\n\n    //Handles the icon of the start_pause button\n    const playPause = running ? faPause : faPlay;\n    const beepUrl = \"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\";\n    \n    return (\n        <div id='app'>    \n            <div id='length-control'>\n                <LengthControl \n                  name='session'\n                  title='Session length'\n                  handleClick={handleSessionClick}\n                  value={sessionLength}\n                  handleChange={change}\n                />\n                <LengthControl \n                  name='break'\n                  title='Break length'\n                  handleClick={handleBreakClick}\n                  value={breakLength}\n                  handleChange={change}\n                />\n            </div>\n            <div id='timer-controls-wrapper'>\n                <Timer \n                  label={current}\n                  time={displayTime}\n                  innerColor={sessionLoopColor}\n                  innerLength={sessionLoopOutline}\n                  outerColor={breakLoopColor}\n                  outerLength={breakLoopOutline}\n                />\n                <div id='controls'>\n                    <Control\n                      id='start_stop'\n                      handleClick={startPause}\n                      icon={playPause}\n                    />\n                    <Control\n                      id='reset'\n                      handleClick={reset}\n                      icon={faSync}\n                    />\n                    <audio \n                      id='beep' \n                      src={beepUrl}\n                      ref={audioRef} \n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}